<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
    >

    <!-- <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close"
        p:driverClassName="com.mysql.jdbc.Driver"
        p:url="jdbc:mysql://localhost:3306/mydb"
        p:username="root"
        p:password="masterkaoli"/> -->
	<context:spring-configured />

	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<mvc:annotation-driven/>
	
	<context:annotation-config/>
	
	<context:component-scan base-package="com.caicai.www">
		<!-- <context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" /> -->
	</context:component-scan>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.caicai.www.service.HelloWorldService.*(..))" id="myPointCut"/>
		<!-- <aop:advisor advice-ref="s" pointcut-ref="myPointCut"/> -->
		
		<aop:aspect id="myAspect" ref="ExceptionInterceptor">
			<aop:before method="before" pointcut-ref="myPointCut"/>
			<aop:after-throwing method="afterThrowing" pointcut-ref="myPointCut" throwing="e" />
		</aop:aspect>
		
		
	</aop:config>
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/configure.properties</value>
			</list>
		</property>
	</bean>
	
	<bean class="com.caicai.www.service.HelloWorldService"/>
	
	<bean id="ExceptionInterceptor" class="com.caicai.www.intercepter.ExceptionInterceptor"/>
	
	<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
		<property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
	</bean>
	
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${brokerUrl}"></property>
	</bean>
	
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory"/>
		<property name="maxConnections" value="10"/>
		<property name="reconnectOnException" value="true"/>
	</bean>
	<!-- Spring提供的jms工具类，它可以进行消息发送，接受 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个connectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory"/>
	</bean>
	
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="topic"/>
	</bean>
	
	 <!-- <context:component-scan base-package="com.caicai.www"></context:component-scan>  -->
	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
		<property name="beans">
			<map>
				<entry key="bean:name=helloworld1" value-ref="helloworld"/>
				<entry key="bean:name=test1" value-ref="test"></entry>
			</map>
		</property>
		<property name="autodetect" value="true"/>
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
		<property name="assembler" ref="metadata"/>
		<property name="server" ref="mbServer" />
	</bean>
	<bean id="metadata" class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
		<property name="attributeSource" ref="jmxAttributeSourse"></property>
	</bean>
	
	
	<bean id="jmxAttributeSourse" class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"></bean>
	
	<bean id="helloworld" class="com.caicai.www.jmx.HelloWorld">
		<property name="name" value="caicai"/>
	</bean>
	
	<bean id="test" class="com.caicai.www.jmx.AnnotationTestBean"></bean>
	
	<bean name="spring:mbean=true" class="com.caicai.www.intercepter.ExceptionInterceptor"></bean>
	
	<bean id="mbServer" class="org.springframework.jmx.support.MBeanServerFactoryBean" >
		<!-- <property name="locateExistingServerIfPossible" value="true"></property> -->
		<!-- <property name="agentId" value="233"></property> -->
		<!-- <property name=""></property> -->
		
	</bean>
	
	<bean id="serverConnection" class="org.springframework.jmx.support.ConnectorServerFactoryBean">
		<property name="serviceUrl" value="service:jmx:rmi://localhost/jndi/rmi://localhost:1099/myconnector" />
		<property name="objectName" value="connector:name=rmi"/>
		<property name="daemon" value="true"/>
		<property name="threaded" value="true"></property>
		<!-- <property name="environmentMap">
			<map>
				<entry key="name" value="caicaiConnector" />
			</map>
		</property> -->
		<property name="server" ref="mbServer"/>
	</bean>
	
	<bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
		<property name="port" value="1099"/>
	</bean>
</beans>